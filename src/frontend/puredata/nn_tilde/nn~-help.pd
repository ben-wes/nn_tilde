#N canvas 374 95 984 855 12;
#X obj 10 51 cnv 1 960 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 22 18 nn~;
#X text 59 18 - real-time ai audio processing;
#X obj 570 67 bng 19 250 50 0 \$0-browse-vschaos2 empty IRCAM\ vschaos2\ models 24 9 0 12 #fcfcfc #000000 #000000;
#X obj 764 92 bng 19 250 50 0 \$0-browse-rave-iil empty iiL\ RAVE\ models 24 9 0 12 #fcfcfc #000000 #000000;
#X obj 570 92 bng 19 250 50 0 \$0-browse-rave empty IRCAM\ RAVE\ models 24 9 0 12 #fcfcfc #000000 #000000;
#N canvas 38 607 670 504 guts 0;
#X obj 57 272 pdcontrol;
#X msg 60 162 browse https://acids-ircam.github.io/rave_models_download;
#X msg 60 222 browse https://www.dropbox.com/sh/avdeiza7c6bn2of/AAAGZsnRo9ZVMa0iFhouCBL-a?dl=0, f 80;
#X obj 60 198 r \$0-browse-vschaos2;
#X obj 60 138 r \$0-browse-rave-ircam;
#X obj 61 73 r \$0-browse-rave-iil;
#X msg 61 98 browse https://huggingface.co/Intelligent-Instruments-Lab/rave-models, f 69;
#X obj 84 335 loadbang;
#X msg 84 359 0;
#X obj 84 383 s \$0-enable;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X connect 6 0 0 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X restore 901 800 pd guts;
#X msg 24 776 gpu \$1;
#X obj 24 752 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 591 621 <-- latent space;
#X obj 400 549 vsl 19 162 -10 10 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 479 279 tgl 19 0 \$0-enable empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#N canvas 237 262 668 332 snapshottolatentspace 0;
#X obj 49 158 snapshot~;
#X obj 139 158 snapshot~;
#X obj 230 158 snapshot~;
#X obj 323 158 snapshot~;
#X obj 49 182 outlet;
#X obj 139 182 outlet;
#X obj 230 182 outlet;
#X obj 323 182 outlet;
#X obj 49 44 inlet~;
#X obj 404 110 route enable;
#X obj 404 139 metro 25;
#X obj 404 86 r \$0-nn;
#X obj 49 101 snake~ out 4;
#X connect 0 0 4 0;
#X connect 1 0 5 0;
#X connect 2 0 6 0;
#X connect 3 0 7 0;
#X connect 8 0 12 0;
#X connect 9 0 10 0;
#X connect 10 0 2 0;
#X connect 10 0 3 0;
#X connect 10 0 1 0;
#X connect 10 0 0 0;
#X connect 11 0 9 0;
#X connect 12 0 0 0;
#X connect 12 1 1 0;
#X connect 12 2 2 0;
#X connect 12 3 3 0;
#X restore 400 509 pd snapshottolatentspace;
#X text 375 540 10;
#X text 382 621 0;
#X text 368 703 -10;
#X obj 455 549 vsl 19 162 -10 10 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 510 549 vsl 19 162 -10 10 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 565 549 vsl 19 162 -10 10 0 0 empty empty empty 0 -9 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 400 314 noise~;
#X obj 479 338 f;
#X obj 479 386 mtof;
#X obj 400 800 dac~;
#X obj 479 410 lop~ 12;
#X obj 557 417 +~ 3;
#X obj 400 436 bob~;
#X obj 557 393 *~ 3;
#X msg 418 338 1 \, 0 60;
#X obj 418 362 line~;
#X obj 400 411 *~;
#X obj 418 386 pow~ 2;
#X obj 509 338 + 4;
#X obj 479 362 + 50;
#X obj 539 338 mod 41;
#X obj 557 369 osc~ 7;
#X text 21 65 At its core \, nn~ is a translation layer between Pure Data and the libtorch C++ interface for deep learning. Alone \, nn~ is like an empty shell \, and requires pretrained models to operate. You can find a few models here:, f 74;
#X obj 724 509 dac~;
#X text 21 314 optional leading flags:;
#X obj 24 706 s \$0-nn;
#X msg 24 610 bufsize 0;
#X msg 24 634 bufsize 2048;
#X msg 24 658 bufsize 4096;
#X msg 24 682 bufsize 16384;
#X text 120 659 <-- default;
#X obj 479 314 metro 150;
#X text 25 243 3rd :;
#X text 25 205 2nd :;
#X text 68 205 <method> - optional \, defaults to "forward", f 21;
#X text 25 183 1st :;
#X text 69 183 <model_path>;
#X obj 107 752 tgl 19 0 empty \$0-enable empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 107 776 enable \$1;
#X msg 724 314 enable \$1;
#X obj 724 279 tgl 19 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X text 25 343 -m :;
#X text 65 343 activate multichannel mode (in- and output signal for all methods combined in 1 inlet and 1 outlet), f 33;
#X text 25 396 -g :;
#X text 64 396 activate GPU mode (if available);
#X text 25 419 -d :;
#X text 64 419 initialize in disabled state;
#X msg 24 509 load nasa;
#X obj 625 448 r \$0-nn;
#X obj 622 737 r \$0-nn;
#X text 100 508 <-- dynamically load another model;
#X obj 400 732 snake~ in 4;
#X obj 400 756 nn~ -m -g percussion.ts decode;
#X obj 724 467 nn~ -d percussion.ts decode 8192;
#X obj 24 800 s \$0-nn;
#X obj 107 800 s \$0-nn;
#X obj 24 557 s \$0-nn;
#X obj 400 467 nn~ -m -g percussion.ts encode;
#X msg 24 533 load percussion;
#X obj 746 392 osc~ 4;
#X obj 797 392 osc~ 5;
#X obj 848 392 osc~ 6;
#X obj 899 392 osc~ 7;
#X obj 607 800 print;
#X text 620 653 combining "encode" and "decode" objects like this without manipulation of the latent trajectory is similar to using the "forward" method., f 41;
#X text 394 243 timbre transfer;
#X text 722 243 decoder-only;
#X obj 197 800 s \$0-nn;
#X obj 197 751 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X text 224 737 bang to output state on info outlet, f 14;
#X text 22 151 CREATION ARGS:;
#X text 23 473 MESSAGES:;
#X text 392 151 EXAMPLES (these require the percussion.ts model from the IRCAM RAVE models above):, f 29;
#X text 68 243 <buffer size> - optional \, defaults to 4096 0 sets no-thread-mode \, resulting in lower latency, f 34;
#X text 652 800 <-- check info log on bang;
#X connect 7 0 67 0;
#X connect 8 0 7 0;
#X connect 10 0 64 0;
#X connect 11 0 44 0;
#X connect 12 0 10 0;
#X connect 12 1 16 0;
#X connect 12 2 17 0;
#X connect 12 3 18 0;
#X connect 16 0 64 1;
#X connect 17 0 64 2;
#X connect 18 0 64 3;
#X connect 19 0 29 0;
#X connect 20 0 31 0;
#X connect 20 0 32 0;
#X connect 21 0 23 0;
#X connect 23 0 25 1;
#X connect 24 0 25 2;
#X connect 25 0 70 0;
#X connect 26 0 24 0;
#X connect 27 0 28 0;
#X connect 28 0 30 0;
#X connect 29 0 25 0;
#X connect 30 0 29 1;
#X connect 31 0 33 0;
#X connect 32 0 21 0;
#X connect 33 0 20 1;
#X connect 34 0 26 0;
#X connect 39 0 38 0;
#X connect 40 0 38 0;
#X connect 41 0 38 0;
#X connect 42 0 38 0;
#X connect 44 0 20 0;
#X connect 44 0 27 0;
#X connect 50 0 51 0;
#X connect 51 0 68 0;
#X connect 52 0 66 0;
#X connect 53 0 52 0;
#X connect 60 0 69 0;
#X connect 61 0 70 0;
#X connect 62 0 65 0;
#X connect 64 0 65 0;
#X connect 65 0 22 0;
#X connect 65 1 76 0;
#X connect 66 0 36 0;
#X connect 66 1 36 1;
#X connect 70 0 12 0;
#X connect 71 0 69 0;
#X connect 72 0 66 0;
#X connect 73 0 66 1;
#X connect 74 0 66 2;
#X connect 75 0 66 3;
#X connect 81 0 80 0;
